{"ast":null,"code":"var _jsxFileName = \"/Users/gaeun/Documents/Nomad/instaclone_prep/Movie Client/src/routes/Home.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/client\"; //copy the query\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_MOVIES = gql`\n    { \n        movies{\n            id\n            medium_cover_image\n        }\n    }\n`;\nexport default _s(() => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_MOVIES); //use query - react hook\n  // console.log(loading, error, data);\n\n  if (loading) {\n    return \"loading...\";\n  }\n\n  if (data && data.movies) {\n    return data.movies.map(m => /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: m.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 37\n    }, this));\n  }\n\n  if (error) {\n    console.log(error);\n  } // return <h1>Home</h1>;\n\n}, \"imZ9qX9Eo1HXSSMxvYca4+nj5V4=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/gaeun/Documents/Nomad/instaclone_prep/Movie Client/src/routes/Home.js"],"names":["React","gql","useQuery","GET_MOVIES","loading","error","data","movies","map","m","id","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,cAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB,C,CAEA;;;AACA,MAAMC,UAAU,GAAGF,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,kBAAe,MAAM;AAAA;;AACjB,QAAK;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAiBC,IAAAA;AAAjB,MAA0BJ,QAAQ,CAACC,UAAD,CAAvC,CADiB,CACqC;AACtD;;AACA,MAAGC,OAAH,EAAW;AACP,WAAO,YAAP;AACH;;AACD,MAAGE,IAAI,IAAIA,IAAI,CAACC,MAAhB,EAAuB;AACnB,WAAOD,IAAI,CAACC,MAAL,CAAYC,GAAZ,CAAgBC,CAAC,iBAAI;AAAA,gBAAKA,CAAC,CAACC;AAAP;AAAA;AAAA;AAAA;AAAA,YAArB,CAAP;AACH;;AACD,MAAGL,KAAH,EAAS;AACLM,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACH,GAXgB,CAYjB;;AACH,CAbD;AAAA,UACmCH,QADnC;AAAA","sourcesContent":["import React from \"react\";\nimport {gql} from \"apollo-boost\";\nimport { useQuery } from \"@apollo/client\";\n\n//copy the query\nconst GET_MOVIES = gql`\n    { \n        movies{\n            id\n            medium_cover_image\n        }\n    }\n`;\n\nexport default () => {\n    const{ loading, error,data } = useQuery(GET_MOVIES);  //use query - react hook\n    // console.log(loading, error, data);\n    if(loading){\n        return \"loading...\"\n    }\n    if(data && data.movies){\n        return data.movies.map(m => <h1>{m.id}</h1>)\n    }\n    if(error){\n        console.log(error);\n    }\n    // return <h1>Home</h1>;\n};"]},"metadata":{},"sourceType":"module"}